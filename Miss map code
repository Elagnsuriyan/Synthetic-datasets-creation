import os
import random
import pandas as pd
from Bio import SeqIO
from Bio.Seq import Seq, MutableSeq
from Bio.SeqRecord import SeqRecord

def read_fasta(file_path):
    print(f"Reading FASTA file: {file_path}")
    return list(SeqIO.parse(file_path, 'fasta'))

def insert_dna_sequence(x_sequence, a_sequences, insert_range):
    """
    Insert one sequence from a_sequences into x_sequence within the specified insert_range.
    """
    seq_length = len(x_sequence)
    start, end = int(seq_length * insert_range[0]), int(seq_length * insert_range[1])

    # Choose 1 sequence randomly from a_sequences
    insert_seq = random.choice(a_sequences)
    insert_position = random.randint(start, end-1)

    # Insert sequence
    mutable_seq = MutableSeq(str(x_sequence))
    mutable_seq = mutable_seq[:insert_position] + insert_seq.seq + mutable_seq[insert_position:]

    # Print insertion details
    print(f"Inserted DNA sequence of length {len(insert_seq.seq)} at position {insert_position} in x_sequence")
    print(f"Inserted DNA sequence: {insert_seq.seq}")

    return mutable_seq, insert_position, insert_seq

def process_files(x_files, a_files, output_dir):
    results = []

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    for i, x_file in enumerate(x_files):
        x_base = os.path.basename(x_file)
        x_id = x_base.split('.')[0]  # Extracts the part before ".fasta"

        if i < len(a_files):
            a_file = a_files[i]  # Use the corresponding a file based on index
        else:
            print(f"No corresponding a file found for {x_file}. Skipping.")
            continue

        a_series, a_percent = os.path.basename(a_file).split('_')[0], os.path.basename(a_file).split('_')[1].split('.')[0]

        a_sequences = read_fasta(a_file)
        x_sequences = read_fasta(x_file)

        insert_range = (0.0, 0.20)  # Insert range for a1_50.fasta

        prefix = "POS" if x_id.startswith('x') else "NEG"
        output_fasta = os.path.join(output_dir, f'{prefix}_{x_id}_{a_series}_{a_percent}_modified.fasta')
        output_csv = os.path.join(output_dir, f'{prefix}_{x_id}_{a_series}_{a_percent}_insertion_details.csv')

        modified_records = []
        insertion_details = []

        for x_record in x_sequences:
            try:
                modified_seq, position, insert_seq = insert_dna_sequence(x_record.seq, a_sequences, insert_range)

                modified_records.append(SeqRecord(Seq(str(modified_seq)), id=x_record.id, description=""))

                insertion_details.append({
                    'SeqID': x_record.id,
                    'Old Length': len(x_record.seq),
                    'New Length': len(modified_seq),
                    'Inserted Position (in percentage)': insert_range,
                    'Inserted Position': position,
                    'Inserted DNA Size': len(insert_seq.seq),
                    'Inserted DNA Seq': str(insert_seq.seq)
                })
            except Exception as e:
                print(f"Error processing sequence {x_record.id}: {e}")

        if modified_records:
            SeqIO.write(modified_records, output_fasta, 'fasta')
            print(f"Written modified records to {output_fasta}")
        if insertion_details:
            pd.DataFrame(insertion_details).to_csv(output_csv, index=False)
            print(f"Written insertion details to {output_csv}")

        results.append({
            'New Inserted File Name': output_fasta,
            'Total Number of Genes': len(modified_records)
        })

    master_csv = os.path.join(output_dir, 'master_insertion_summary.csv')
    pd.DataFrame(results).to_csv(master_csv, index=False)
    print(f"Written master insertion summary to {master_csv}")

def main():
    x_files = [
        'x111_POS.fasta', 'x112_POS.fasta', 'x113_POS.fasta', 'x114_POS.fasta',
        'x121_POS.fasta', 'x122_POS.fasta', 'x123_POS.fasta', 'x124_POS.fasta',
        'x131_POS.fasta', 'x132_POS.fasta', 'x133_POS.fasta', 'x134_POS.fasta',
        'x141_POS.fasta', 'x142_POS.fasta', 'x143_POS.fasta', 'x144_POS.fasta'
    ]

    a_files = [
        'a_50.fasta', 'a_30.fasta', 'a_15.fasta', 'a_5.fasta',
        'b_50.fasta', 'b_30.fasta', 'b_15.fasta', 'b_5.fasta',
        'c_50.fasta', 'c_30.fasta', 'c_15.fasta', 'c_5.fasta',
        'd_50.fasta', 'd_30.fasta', 'd_15.fasta', 'd_5.fasta'
    ]

    output_dir = 'test'
    process_files(x_files, a_files, output_dir)

if __name__ == "__main__":
    main()
